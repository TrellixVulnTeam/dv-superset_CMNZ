"use strict";

exports.__esModule = true;
exports.default = buildQuery;

var _core = require("@superset-ui/core");

var _chartControls = require("@superset-ui/chart-controls");

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
function buildQuery(formData) {
  return (0, _core.buildQueryContext)(formData, baseQueryObject => [{ ...baseQueryObject,
    is_timeseries: true,
    // todo: move `normalizeOrderBy to extractQueryFields`
    orderby: (0, _core.normalizeOrderBy)(baseQueryObject).orderby,
    time_offsets: (0, _chartControls.isValidTimeCompare)(formData, baseQueryObject) ? formData.time_compare : [],
    post_processing: [(0, _chartControls.timeCompareOperator)(formData, baseQueryObject), (0, _chartControls.sortOperator)(formData, { ...baseQueryObject,
      is_timeseries: true
    }), (0, _chartControls.rollingWindowOperator)(formData, baseQueryObject), (0, _chartControls.pivotOperator)(formData, { ...baseQueryObject,
      is_timeseries: true
    }), formData.contributionMode ? {
      operation: 'contribution',
      options: {
        orientation: formData.contributionMode
      }
    } : undefined, formData.forecastEnabled ? {
      operation: 'prophet',
      options: {
        time_grain: formData.time_grain_sqla,
        periods: parseInt(formData.forecastPeriods, 10),
        confidence_interval: parseFloat(formData.forecastInterval),
        yearly_seasonality: formData.forecastSeasonalityYearly,
        weekly_seasonality: formData.forecastSeasonalityWeekly,
        daily_seasonality: formData.forecastSeasonalityDaily
      }
    } : undefined]
  }]);
}