{"ast":null,"code":"import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";var _jsxFileName = \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/SaveModal.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport React from 'react';\nimport { Radio } from 'src/components/Radio';\nimport { Input } from 'src/common/components';\nimport Button from 'src/components/Button';\nimport { t, CategoricalColorNamespace } from '@superset-ui/core';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport Checkbox from 'src/components/Checkbox';\nimport { SAVE_TYPE_OVERWRITE, SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst defaultProps = {\n  saveType: SAVE_TYPE_OVERWRITE,\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  shouldPersistRefreshFrequency: false };\n\nclass SaveModal extends React.PureComponent {\n\n\n\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6;\n    super(props);this.modal = void 0;this.onSave = void 0;\n    this.state = {\n      saveType: props.saveType,\n      newDashName: `${props.dashboardTitle} [copy]`,\n      duplicateSlices: false };\n\n    this.modal = null;\n    this.handleSaveTypeChange = _bindInstanceProperty(_context = this.handleSaveTypeChange).call(_context, this);\n    this.handleNameChange = _bindInstanceProperty(_context2 = this.handleNameChange).call(_context2, this);\n    this.saveDashboard = _bindInstanceProperty(_context3 = this.saveDashboard).call(_context3, this);\n    this.setModalRef = _bindInstanceProperty(_context4 = this.setModalRef).call(_context4, this);\n    this.toggleDuplicateSlices = _bindInstanceProperty(_context5 = this.toggleDuplicateSlices).call(_context5, this);\n    this.onSave = _bindInstanceProperty(_context6 = this.props.onSave).call(_context6, this);\n  }\n  setModalRef(ref) {\n    this.modal = ref;\n  }\n  toggleDuplicateSlices() {\n    this.setState((prevState) => ({\n      duplicateSlices: !prevState.duplicateSlices }));\n\n  }\n  handleSaveTypeChange(event) {\n    this.setState({\n      saveType: event.target.value });\n\n  }\n  handleNameChange(name) {\n    this.setState({\n      newDashName: name,\n      saveType: SAVE_TYPE_NEWDASHBOARD });\n\n  }\n  saveDashboard() {var _dashboardInfo$metada;\n    const { saveType, newDashName } = this.state;\n    const { dashboardTitle, dashboardInfo, layout: positions, customCss, colorNamespace, colorScheme, expandedSlices, dashboardId, refreshFrequency: currentRefreshFrequency, shouldPersistRefreshFrequency, lastModifiedTime } = this.props;\n    const scale = CategoricalColorNamespace.getScale(colorScheme, colorNamespace);\n    const labelColors = colorScheme ? scale.getColorMap() : {};\n    // check refresh frequency is for current session or persist\n    const refreshFrequency = shouldPersistRefreshFrequency ?\n    currentRefreshFrequency : (_dashboardInfo$metada =\n    dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.refresh_frequency; // eslint-disable camelcase\n    const data = {\n      positions,\n      css: customCss,\n      color_namespace: colorNamespace,\n      color_scheme: colorScheme,\n      label_colors: labelColors,\n      expanded_slices: expandedSlices,\n      dashboard_title: saveType === SAVE_TYPE_NEWDASHBOARD ? newDashName : dashboardTitle,\n      duplicate_slices: this.state.duplicateSlices,\n      refresh_frequency: refreshFrequency,\n      last_modified_time: lastModifiedTime };\n\n    if (saveType === SAVE_TYPE_NEWDASHBOARD && !newDashName) {\n      this.props.addDangerToast(t('You must pick a name for the new dashboard'));\n    } else\n    {var _this$modal;\n      this.onSave(data, dashboardId, saveType).then((resp) => {\n        if (saveType === SAVE_TYPE_NEWDASHBOARD &&\n        resp &&\n        resp.json &&\n        resp.json.id) {\n          window.location.href = `/superset/dashboard/${resp.json.id}/`;\n        }\n      });\n      (_this$modal = this.modal) == null ? void 0 : _this$modal.close();\n    }\n  }\n  render() {\n    return ___EmotionJSX(ModalTrigger, { ref: this.setModalRef, triggerNode: this.props.triggerNode, modalTitle: t('Save dashboard'), modalBody: ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 109, columnNumber: 135 } },\n      ___EmotionJSX(Radio, { value: SAVE_TYPE_OVERWRITE, onChange: this.handleSaveTypeChange, checked: this.state.saveType === SAVE_TYPE_OVERWRITE, disabled: !this.props.canOverwrite, __self: this, __source: { fileName: _jsxFileName, lineNumber: 110, columnNumber: 13 } },\n      t('Overwrite Dashboard [%s]', this.props.dashboardTitle)),\n\n      ___EmotionJSX(\"hr\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 113, columnNumber: 13 } }),\n      ___EmotionJSX(Radio, { value: SAVE_TYPE_NEWDASHBOARD, onChange: this.handleSaveTypeChange, checked: this.state.saveType === SAVE_TYPE_NEWDASHBOARD, __self: this, __source: { fileName: _jsxFileName, lineNumber: 114, columnNumber: 13 } },\n      t('Save as:')),\n\n      ___EmotionJSX(Input, { type: \"text\", placeholder: t('[dashboard name]'), value: this.state.newDashName, onFocus: (e) => this.handleNameChange(e.target.value), onChange: (e) => this.handleNameChange(e.target.value), __self: this, __source: { fileName: _jsxFileName, lineNumber: 117, columnNumber: 13 } }),\n      ___EmotionJSX(\"div\", { className: \"m-l-25 m-t-5\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 118, columnNumber: 13 } },\n      ___EmotionJSX(Checkbox, { checked: this.state.duplicateSlices, onChange: () => this.toggleDuplicateSlices(), __self: this, __source: { fileName: _jsxFileName, lineNumber: 119, columnNumber: 15 } }),\n      ___EmotionJSX(\"span\", { className: \"m-l-5\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 120, columnNumber: 15 } }, t('also copy (duplicate) charts')))),\n\n      modalFooter: ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 122, columnNumber: 32 } },\n      ___EmotionJSX(Button, { \"data-test\": \"modal-save-dashboard-button\", buttonStyle: \"primary\", onClick: this.saveDashboard, __self: this, __source: { fileName: _jsxFileName, lineNumber: 123, columnNumber: 13 } },\n      t('Save'))), __self: this, __source: { fileName: _jsxFileName, lineNumber: 109, columnNumber: 17 } });\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}SaveModal.defaultProps = defaultProps;const _default = SaveModal;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(defaultProps, \"defaultProps\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/SaveModal.tsx\");reactHotLoader.register(SaveModal, \"SaveModal\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/SaveModal.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/SaveModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/SaveModal.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport React from 'react';\nimport { Radio } from 'src/components/Radio';\nimport { RadioChangeEvent, Input } from 'src/common/components';\nimport Button from 'src/components/Button';\nimport { t, CategoricalColorNamespace, JsonResponse } from '@superset-ui/core';\n\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport Checkbox from 'src/components/Checkbox';\nimport {\n  SAVE_TYPE_OVERWRITE,\n  SAVE_TYPE_NEWDASHBOARD,\n} from 'src/dashboard/util/constants';\n\ntype SaveType = typeof SAVE_TYPE_OVERWRITE | typeof SAVE_TYPE_NEWDASHBOARD;\n\ntype SaveModalProps = {\n  addSuccessToast: (arg: string) => void;\n  addDangerToast: (arg: string) => void;\n  dashboardId: number;\n  dashboardTitle: string;\n  dashboardInfo: Record<string, any>;\n  expandedSlices: Record<string, any>;\n  layout: Record<string, any>;\n  saveType: SaveType;\n  triggerNode: JSX.Element;\n  customCss: string;\n  colorNamespace?: string;\n  colorScheme?: string;\n  onSave: (data: any, id: number | string, saveType: SaveType) => void;\n  canOverwrite: boolean;\n  shouldPersistRefreshFrequency: boolean;\n  refreshFrequency: number;\n  lastModifiedTime: number;\n};\n\ntype SaveModalState = {\n  saveType: SaveType;\n  newDashName: string;\n  duplicateSlices: boolean;\n};\n\nconst defaultProps = {\n  saveType: SAVE_TYPE_OVERWRITE,\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  shouldPersistRefreshFrequency: false,\n};\n\nclass SaveModal extends React.PureComponent<SaveModalProps, SaveModalState> {\n  static defaultProps = defaultProps;\n\n  modal: ModalTrigger | null;\n\n  onSave: (\n    data: Record<string, any>,\n    dashboardId: number | string,\n    saveType: SaveType,\n  ) => Promise<JsonResponse>;\n\n  constructor(props: SaveModalProps) {\n    super(props);\n    this.state = {\n      saveType: props.saveType,\n      newDashName: `${props.dashboardTitle} [copy]`,\n      duplicateSlices: false,\n    };\n    this.modal = null;\n    this.handleSaveTypeChange = this.handleSaveTypeChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.saveDashboard = this.saveDashboard.bind(this);\n    this.setModalRef = this.setModalRef.bind(this);\n    this.toggleDuplicateSlices = this.toggleDuplicateSlices.bind(this);\n    this.onSave = this.props.onSave.bind(this);\n  }\n\n  setModalRef(ref: ModalTrigger | null) {\n    this.modal = ref;\n  }\n\n  toggleDuplicateSlices(): void {\n    this.setState(prevState => ({\n      duplicateSlices: !prevState.duplicateSlices,\n    }));\n  }\n\n  handleSaveTypeChange(event: RadioChangeEvent) {\n    this.setState({\n      saveType: (event.target as HTMLInputElement).value as SaveType,\n    });\n  }\n\n  handleNameChange(name: string) {\n    this.setState({\n      newDashName: name,\n      saveType: SAVE_TYPE_NEWDASHBOARD,\n    });\n  }\n\n  saveDashboard() {\n    const { saveType, newDashName } = this.state;\n    const {\n      dashboardTitle,\n      dashboardInfo,\n      layout: positions,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      expandedSlices,\n      dashboardId,\n      refreshFrequency: currentRefreshFrequency,\n      shouldPersistRefreshFrequency,\n      lastModifiedTime,\n    } = this.props;\n\n    const scale = CategoricalColorNamespace.getScale(\n      colorScheme,\n      colorNamespace,\n    );\n    const labelColors = colorScheme ? scale.getColorMap() : {};\n    // check refresh frequency is for current session or persist\n    const refreshFrequency = shouldPersistRefreshFrequency\n      ? currentRefreshFrequency\n      : dashboardInfo.metadata?.refresh_frequency; // eslint-disable camelcase\n\n    const data = {\n      positions,\n      css: customCss,\n      color_namespace: colorNamespace,\n      color_scheme: colorScheme,\n      label_colors: labelColors,\n      expanded_slices: expandedSlices,\n      dashboard_title:\n        saveType === SAVE_TYPE_NEWDASHBOARD ? newDashName : dashboardTitle,\n      duplicate_slices: this.state.duplicateSlices,\n      refresh_frequency: refreshFrequency,\n      last_modified_time: lastModifiedTime,\n    };\n\n    if (saveType === SAVE_TYPE_NEWDASHBOARD && !newDashName) {\n      this.props.addDangerToast(\n        t('You must pick a name for the new dashboard'),\n      );\n    } else {\n      this.onSave(data, dashboardId, saveType).then((resp: JsonResponse) => {\n        if (\n          saveType === SAVE_TYPE_NEWDASHBOARD &&\n          resp &&\n          resp.json &&\n          resp.json.id\n        ) {\n          window.location.href = `/superset/dashboard/${resp.json.id}/`;\n        }\n      });\n      this.modal?.close();\n    }\n  }\n\n  render() {\n    return (\n      <ModalTrigger\n        ref={this.setModalRef}\n        triggerNode={this.props.triggerNode}\n        modalTitle={t('Save dashboard')}\n        modalBody={\n          <div>\n            <Radio\n              value={SAVE_TYPE_OVERWRITE}\n              onChange={this.handleSaveTypeChange}\n              checked={this.state.saveType === SAVE_TYPE_OVERWRITE}\n              disabled={!this.props.canOverwrite}\n            >\n              {t('Overwrite Dashboard [%s]', this.props.dashboardTitle)}\n            </Radio>\n            <hr />\n            <Radio\n              value={SAVE_TYPE_NEWDASHBOARD}\n              onChange={this.handleSaveTypeChange}\n              checked={this.state.saveType === SAVE_TYPE_NEWDASHBOARD}\n            >\n              {t('Save as:')}\n            </Radio>\n            <Input\n              type=\"text\"\n              placeholder={t('[dashboard name]')}\n              value={this.state.newDashName}\n              onFocus={e => this.handleNameChange(e.target.value)}\n              onChange={e => this.handleNameChange(e.target.value)}\n            />\n            <div className=\"m-l-25 m-t-5\">\n              <Checkbox\n                checked={this.state.duplicateSlices}\n                onChange={() => this.toggleDuplicateSlices()}\n              />\n              <span className=\"m-l-5\">{t('also copy (duplicate) charts')}</span>\n            </div>\n          </div>\n        }\n        modalFooter={\n          <div>\n            <Button\n              data-test=\"modal-save-dashboard-button\"\n              buttonStyle=\"primary\"\n              onClick={this.saveDashboard}\n            >\n              {t('Save')}\n            </Button>\n          </div>\n        }\n      />\n    );\n  }\n}\n\nexport default SaveModal;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}