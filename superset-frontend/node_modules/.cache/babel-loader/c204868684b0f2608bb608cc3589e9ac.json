{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";import _valuesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/values\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { ensureIsArray } from '@superset-ui/core';\nexport class OptionSelector {\n\n\n\n  constructor(options, multi, initialValues) {var _context, _context2;this.values = void 0;this.options = void 0;this.multi = void 0;\n    this.options = options;\n    this.multi = multi;\n    this.values = _filterInstanceProperty(_context = _mapInstanceProperty(_context2 = ensureIsArray(initialValues)).call(_context2,\n    (value) => {\n      if (value in options) {\n        return options[value];\n      }\n      return null;\n    })).call(_context,\n    Boolean);\n  }\n  add(value) {\n    if (value in this.options) {\n      _valuesInstanceProperty(this).push(this.options[value]);\n    }\n  }\n  del(idx) {var _context3;\n    _spliceInstanceProperty(_context3 = _valuesInstanceProperty(this)).call(_context3, idx, 1);\n  }\n  replace(idx, value) {\n    if (_valuesInstanceProperty(this)[idx]) {\n      _valuesInstanceProperty(this)[idx] = this.options[value];\n    }\n  }\n  swap(a, b) {\n    [_valuesInstanceProperty(this)[a], _valuesInstanceProperty(this)[b]] = [_valuesInstanceProperty(this)[b], _valuesInstanceProperty(this)[a]];\n  }\n  has(value) {var _this$getValues;\n    return !!((_this$getValues = this.getValues()) != null && _includesInstanceProperty(_this$getValues).call(_this$getValues, value));\n  }\n  getValues() {var _context4;\n    if (!this.multi) {\n      return _valuesInstanceProperty(this).length > 0 ? _valuesInstanceProperty(this)[0].column_name : undefined;\n    }\n    return _mapInstanceProperty(_context4 = _valuesInstanceProperty(this)).call(_context4, (option) => option.column_name);\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(OptionSelector, \"OptionSelector\", \"/Users/frankhe/projects/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/utils/optionSelector.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/Users/frankhe/projects/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/utils/optionSelector.ts"],"names":[],"mappings":"0yBAmBA,SAAS,aAAT,QAA8B,mBAA9B;AAEA,OAAM,MAAO,cAAP,CAAqB;;;;AAOzB,EAAA,WAAA,CACE,OADF,EAEE,KAFF,EAGE,aAHF,EAGmC,8BATnC,MASmC,eAPnC,OAOmC,eALnC,KAKmC;AAEjC,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,MAAL,GAAc,oEAAA,aAAa,CAAC,aAAD,CAAb;AACP,KAAA,KAAK,KAAG;AACX,UAAI,KAAK,IAAI,OAAb,EAAsB;AACpB,eAAO,OAAO,CAAC,KAAD,CAAd;AACD;AACD,aAAO,IAAP;AACD,KANW;AAOJ,IAAA,OAPI,CAAd;AAQD;AAED,EAAA,GAAG,CAAC,KAAD,EAAc;AACf,QAAI,KAAK,IAAI,KAAK,OAAlB,EAA2B;AACzB,oCAAY,IAAZ,CAAiB,KAAK,OAAL,CAAa,KAAb,CAAjB;AACD;AACF;AAED,EAAA,GAAG,CAAC,GAAD,EAAY;AACb,uFAAmB,GAAnB,EAAwB,CAAxB;AACD;AAED,EAAA,OAAO,CAAC,GAAD,EAAc,KAAd,EAA2B;AAChC,QAAI,8BAAY,GAAZ,CAAJ,EAAsB;AACpB,oCAAY,GAAZ,IAAmB,KAAK,OAAL,CAAa,KAAb,CAAnB;AACD;AACF;AAED,EAAA,IAAI,CAAC,CAAD,EAAY,CAAZ,EAAqB;AACvB,KAAC,8BAAY,CAAZ,CAAD,EAAiB,8BAAY,CAAZ,CAAjB,IAAmC,CAAC,8BAAY,CAAZ,CAAD,EAAiB,8BAAY,CAAZ,CAAjB,CAAnC;AACD;AAED,EAAA,GAAG,CAAC,KAAD,EAAc;AACf,WAAO,CAAC,qBAAC,KAAK,SAAL,EAAD,aAAC,iEAA2B,KAA3B,CAAD,CAAR;AACD;AAED,EAAA,SAAS,GAAA;AACP,QAAI,CAAC,KAAK,KAAV,EAAiB;AACf,aAAO,8BAAY,MAAZ,GAAqB,CAArB,GAAyB,8BAAY,CAAZ,EAAe,WAAxC,GAAsD,SAA7D;AACD;AACD,WAAO,gFAAgB,CAAA,MAAM,KAAI,MAAM,CAAC,WAAjC,CAAP;AACD,GArDwB;AAAA;AAAA,6B,iLAAd,c","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport { ensureIsArray } from '@superset-ui/core';\n\nexport class OptionSelector {\n  values: ColumnMeta[];\n\n  options: { string: ColumnMeta };\n\n  multi: boolean;\n\n  constructor(\n    options: { string: ColumnMeta },\n    multi: boolean,\n    initialValues?: string[] | string,\n  ) {\n    this.options = options;\n    this.multi = multi;\n    this.values = ensureIsArray(initialValues)\n      .map(value => {\n        if (value in options) {\n          return options[value];\n        }\n        return null;\n      })\n      .filter(Boolean);\n  }\n\n  add(value: string) {\n    if (value in this.options) {\n      this.values.push(this.options[value]);\n    }\n  }\n\n  del(idx: number) {\n    this.values.splice(idx, 1);\n  }\n\n  replace(idx: number, value: string) {\n    if (this.values[idx]) {\n      this.values[idx] = this.options[value];\n    }\n  }\n\n  swap(a: number, b: number) {\n    [this.values[a], this.values[b]] = [this.values[b], this.values[a]];\n  }\n\n  has(value: string): boolean {\n    return !!this.getValues()?.includes(value);\n  }\n\n  getValues(): string[] | string | undefined {\n    if (!this.multi) {\n      return this.values.length > 0 ? this.values[0].column_name : undefined;\n    }\n    return this.values.map(option => option.column_name);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}