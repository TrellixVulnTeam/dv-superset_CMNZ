{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { updateDataMask } from 'src/dataMask/actions';\nimport DashboardHeader from '../components/Header';\nimport isDashboardLoading from '../util/isDashboardLoading';\n\nimport { dashboardInfoChanged } from '../actions/dashboardInfo';\n\nimport {\nsetEditMode,\nshowBuilderPane,\nfetchFaveStar,\nsaveFaveStar,\nsavePublished,\nsetColorSchemeAndUnsavedChanges,\nfetchCharts,\nupdateCss,\nonChange,\nsaveDashboardRequest,\nsetMaxUndoHistoryExceeded,\nmaxUndoHistoryToast,\nsetRefreshFrequency,\nonRefresh } from\n'../actions/dashboardState';\n\nimport {\nundoLayoutAction,\nredoLayoutAction,\nupdateDashboardTitle,\ndashboardTitleChanged } from\n'../actions/dashboardLayout';\n\nimport {\naddSuccessToast,\naddDangerToast,\naddWarningToast } from\n'../../messageToasts/actions';\n\nimport { logEvent } from '../../logger/actions';\nimport { DASHBOARD_HEADER_ID } from '../util/constants';\n\nfunction mapStateToProps({\n  dashboardLayout: undoableLayout,\n  dashboardState,\n  dashboardInfo,\n  charts,\n  dataMask,\n  user })\n{\n  return {\n    dashboardInfo,\n    undoLength: undoableLayout.past.length,\n    redoLength: undoableLayout.future.length,\n    layout: undoableLayout.present,\n    dashboardTitle: (\n    (undoableLayout.present[DASHBOARD_HEADER_ID] || {}).meta || {}).\n    text,\n    expandedSlices: dashboardState.expandedSlices,\n    refreshFrequency: dashboardState.refreshFrequency,\n    shouldPersistRefreshFrequency: !!dashboardState.shouldPersistRefreshFrequency,\n    customCss: dashboardState.css,\n    colorNamespace: dashboardState.colorNamespace,\n    colorScheme: dashboardState.colorScheme,\n    charts,\n    dataMask,\n    userId: user.userId,\n    isStarred: !!dashboardState.isStarred,\n    isPublished: !!dashboardState.isPublished,\n    isLoading: isDashboardLoading(charts),\n    hasUnsavedChanges: !!dashboardState.hasUnsavedChanges,\n    maxUndoHistoryExceeded: !!dashboardState.maxUndoHistoryExceeded,\n    lastModifiedTime: Math.max(\n    dashboardState.lastModifiedTime,\n    dashboardInfo.last_modified_time),\n\n    editMode: !!dashboardState.editMode,\n    slug: dashboardInfo.slug,\n    metadata: dashboardInfo.metadata };\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n  {\n    addSuccessToast,\n    addDangerToast,\n    addWarningToast,\n    onUndo: undoLayoutAction,\n    onRedo: redoLayoutAction,\n    setEditMode,\n    showBuilderPane,\n    setColorSchemeAndUnsavedChanges,\n    fetchFaveStar,\n    saveFaveStar,\n    savePublished,\n    fetchCharts,\n    updateDashboardTitle,\n    updateCss,\n    onChange,\n    onSave: saveDashboardRequest,\n    setMaxUndoHistoryExceeded,\n    maxUndoHistoryToast,\n    logEvent,\n    setRefreshFrequency,\n    onRefresh,\n    dashboardInfoChanged,\n    dashboardTitleChanged,\n    updateDataMask },\n\n  dispatch);\n\n}const _default =\n\nconnect(mapStateToProps, mapDispatchToProps)(DashboardHeader);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/containers/DashboardHeader.jsx\");reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/containers/DashboardHeader.jsx\");reactHotLoader.register(_default, \"default\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/containers/DashboardHeader.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/Users/frankhe/projects/superset/superset-frontend/src/dashboard/containers/DashboardHeader.jsx"],"names":["bindActionCreators","connect","updateDataMask","DashboardHeader","isDashboardLoading","dashboardInfoChanged","setEditMode","showBuilderPane","fetchFaveStar","saveFaveStar","savePublished","setColorSchemeAndUnsavedChanges","fetchCharts","updateCss","onChange","saveDashboardRequest","setMaxUndoHistoryExceeded","maxUndoHistoryToast","setRefreshFrequency","onRefresh","undoLayoutAction","redoLayoutAction","updateDashboardTitle","dashboardTitleChanged","addSuccessToast","addDangerToast","addWarningToast","logEvent","DASHBOARD_HEADER_ID","mapStateToProps","dashboardLayout","undoableLayout","dashboardState","dashboardInfo","charts","dataMask","user","undoLength","past","length","redoLength","future","layout","present","dashboardTitle","meta","text","expandedSlices","refreshFrequency","shouldPersistRefreshFrequency","customCss","css","colorNamespace","colorScheme","userId","isStarred","isPublished","isLoading","hasUnsavedChanges","maxUndoHistoryExceeded","lastModifiedTime","Math","max","last_modified_time","editMode","slug","metadata","mapDispatchToProps","dispatch","onUndo","onRedo","onSave"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { updateDataMask } from 'src/dataMask/actions';\nimport DashboardHeader from '../components/Header';\nimport isDashboardLoading from '../util/isDashboardLoading';\n\nimport { dashboardInfoChanged } from '../actions/dashboardInfo';\n\nimport {\n  setEditMode,\n  showBuilderPane,\n  fetchFaveStar,\n  saveFaveStar,\n  savePublished,\n  setColorSchemeAndUnsavedChanges,\n  fetchCharts,\n  updateCss,\n  onChange,\n  saveDashboardRequest,\n  setMaxUndoHistoryExceeded,\n  maxUndoHistoryToast,\n  setRefreshFrequency,\n  onRefresh,\n} from '../actions/dashboardState';\n\nimport {\n  undoLayoutAction,\n  redoLayoutAction,\n  updateDashboardTitle,\n  dashboardTitleChanged,\n} from '../actions/dashboardLayout';\n\nimport {\n  addSuccessToast,\n  addDangerToast,\n  addWarningToast,\n} from '../../messageToasts/actions';\n\nimport { logEvent } from '../../logger/actions';\nimport { DASHBOARD_HEADER_ID } from '../util/constants';\n\nfunction mapStateToProps({\n  dashboardLayout: undoableLayout,\n  dashboardState,\n  dashboardInfo,\n  charts,\n  dataMask,\n  user,\n}) {\n  return {\n    dashboardInfo,\n    undoLength: undoableLayout.past.length,\n    redoLength: undoableLayout.future.length,\n    layout: undoableLayout.present,\n    dashboardTitle: (\n      (undoableLayout.present[DASHBOARD_HEADER_ID] || {}).meta || {}\n    ).text,\n    expandedSlices: dashboardState.expandedSlices,\n    refreshFrequency: dashboardState.refreshFrequency,\n    shouldPersistRefreshFrequency: !!dashboardState.shouldPersistRefreshFrequency,\n    customCss: dashboardState.css,\n    colorNamespace: dashboardState.colorNamespace,\n    colorScheme: dashboardState.colorScheme,\n    charts,\n    dataMask,\n    userId: user.userId,\n    isStarred: !!dashboardState.isStarred,\n    isPublished: !!dashboardState.isPublished,\n    isLoading: isDashboardLoading(charts),\n    hasUnsavedChanges: !!dashboardState.hasUnsavedChanges,\n    maxUndoHistoryExceeded: !!dashboardState.maxUndoHistoryExceeded,\n    lastModifiedTime: Math.max(\n      dashboardState.lastModifiedTime,\n      dashboardInfo.last_modified_time,\n    ),\n    editMode: !!dashboardState.editMode,\n    slug: dashboardInfo.slug,\n    metadata: dashboardInfo.metadata,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      addSuccessToast,\n      addDangerToast,\n      addWarningToast,\n      onUndo: undoLayoutAction,\n      onRedo: redoLayoutAction,\n      setEditMode,\n      showBuilderPane,\n      setColorSchemeAndUnsavedChanges,\n      fetchFaveStar,\n      saveFaveStar,\n      savePublished,\n      fetchCharts,\n      updateDashboardTitle,\n      updateCss,\n      onChange,\n      onSave: saveDashboardRequest,\n      setMaxUndoHistoryExceeded,\n      maxUndoHistoryToast,\n      logEvent,\n      setRefreshFrequency,\n      onRefresh,\n      dashboardInfoChanged,\n      dashboardTitleChanged,\n      updateDataMask,\n    },\n    dispatch,\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardHeader);\n"]},"metadata":{},"sourceType":"module"}