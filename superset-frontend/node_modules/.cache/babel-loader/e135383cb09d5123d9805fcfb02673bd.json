{"ast":null,"code":"import \"core-js/modules/es.string.replace.js\";import \"core-js/modules/web.dom-collections.iterator.js\";import { css as _css } from \"@emotion/react\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _URLSearchParams from \"@babel/runtime-corejs3/core-js-stable/url-search-params\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";var _jsxFileName = \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/index.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign */\nimport { styled, t } from '@superset-ui/core';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport cx from 'classnames';\nimport Icons from 'src/components/Icons';\nimport { Tabs } from 'src/common/components';\nimport { useHistory } from 'react-router-dom';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport rison from 'rison';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { updateDataMask, clearDataMask } from 'src/dataMask/actions';\nimport { useImmer } from 'use-immer';\nimport { testWithId } from 'src/utils/testUtils';\nimport Loading from 'src/components/Loading';\nimport { getInitialDataMask } from 'src/dataMask/reducer';\nimport { URL_PARAMS } from 'src/constants';\nimport replaceUndefinedByNull from 'src/dashboard/util/replaceUndefinedByNull';\nimport { checkIsApplyDisabled, TabIds } from './utils';\nimport FilterSets from './FilterSets';\nimport { useNativeFiltersDataMask, useFilters, useFilterSets, useFilterUpdates, useInitialization } from './state';\nimport EditSection from './FilterSets/EditSection';\nimport Header from './Header';\nimport FilterControls from './FilterControls/FilterControls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const FILTER_BAR_TEST_ID = 'filter-bar';\nexport const getFilterBarTestId = testWithId(FILTER_BAR_TEST_ID);\nconst BarWrapper = styled.div`\n  width: ${({ theme }) => theme.gridUnit * 8}px;\n\n  & .ant-tabs-top > .ant-tabs-nav {\n    margin: 0;\n  }\n  &.open {\n    width: ${({ width }) => width}px; // arbitrary...\n  }\n`;\nconst Bar = styled.div`\n  & .ant-typography-edit-content {\n    left: 0;\n    margin-top: 0;\n    width: 100%;\n  }\n  position: absolute;\n  top: 0;\n  left: 0;\n  flex-direction: column;\n  flex-grow: 1;\n  width: ${({ width }) => width}px;\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  border-right: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  min-height: 100%;\n  display: none;\n\n  &.open {\n    display: flex;\n  }\n`;\nconst CollapsedBar = styled.div`\n  position: absolute;\n  top: ${({ offset }) => offset}px;\n  left: 0;\n  height: 100%;\n  width: ${({ theme }) => theme.gridUnit * 8}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n  display: none;\n  text-align: center;\n\n  &.open {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  svg {\n    cursor: pointer;\n  }\n`;\nconst StyledCollapseIcon = styled(Icons.Collapse)`\n  color: ${({ theme }) => theme.colors.primary.base};\n  margin-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n`;\nconst StyledFilterIcon = styled(Icons.Filter)`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nconst StyledTabs = styled(Tabs)`\n  & .ant-tabs-nav-list {\n    width: 100%;\n  }\n  & .ant-tabs-tab {\n    display: flex;\n    justify-content: center;\n    margin: 0;\n    flex: 1;\n  }\n`;\nconst FilterBar = ({ filtersOpen, toggleFiltersBar, directPathToChild, width, height, offset }) => {\n  const history = useHistory();\n  const dataMaskApplied = useNativeFiltersDataMask();\n  const [editFilterSetId, setEditFilterSetId] = useState(null);\n  const [dataMaskSelected, setDataMaskSelected] = useImmer(dataMaskApplied);\n  const dispatch = useDispatch();\n  const filterSets = useFilterSets();\n  const filterSetFilterValues = _Object$values(filterSets);\n  const [tab, setTab] = useState(TabIds.AllFilters);\n  const filters = useFilters();\n  const previousFilters = usePrevious(filters);\n  const filterValues = _Object$values(filters);\n  const [isFilterSetChanged, setIsFilterSetChanged] = useState(false);\n  useEffect(() => {\n    setDataMaskSelected(() => dataMaskApplied);\n  }, [_JSON$stringify(dataMaskApplied), setDataMaskSelected]);\n  // reset filter state if filter type changes\n  useEffect(() => {\n    setDataMaskSelected((draft) => {var _context;\n      _forEachInstanceProperty(_context = _Object$values(filters)).call(_context, (filter) => {var _previousFilters$filt, _previousFilters$filt2;\n        if (filter.filterType !== (previousFilters == null ? void 0 : (_previousFilters$filt = previousFilters[filter.id]) == null ? void 0 : _previousFilters$filt.filterType) &&\n        (previousFilters == null ? void 0 : (_previousFilters$filt2 = previousFilters[filter.id]) == null ? void 0 : _previousFilters$filt2.filterType) !== undefined) {\n          draft[filter.id] = getInitialDataMask(filter.id);\n        }\n      });\n    });\n  }, [\n  _JSON$stringify(filters),\n  _JSON$stringify(previousFilters),\n  setDataMaskSelected]);\n\n  const handleFilterSelectionChange = (filter, dataMask) => {\n    setIsFilterSetChanged(tab !== TabIds.AllFilters);\n    setDataMaskSelected((draft) => {var _dataMask$filterState, _dataMaskSelected$fil, _dataMaskSelected$fil2;\n      // force instant updating on initialization for filters with `requiredFirst` is true or instant filters\n      if (\n      // filterState.value === undefined - means that value not initialized\n      ((_dataMask$filterState = dataMask.filterState) == null ? void 0 : _dataMask$filterState.value) !== undefined &&\n      ((_dataMaskSelected$fil = dataMaskSelected[filter.id]) == null ? void 0 : (_dataMaskSelected$fil2 = _dataMaskSelected$fil.filterState) == null ? void 0 : _dataMaskSelected$fil2.value) === undefined &&\n      filter.requiredFirst) {\n        dispatch(updateDataMask(filter.id, dataMask));\n      }\n      draft[filter.id] = {\n        ...getInitialDataMask(filter.id),\n        ...dataMask };\n\n    });\n  };\n  const publishDataMask = useCallback((dataMaskSelected) => {\n    const { location } = history;\n    const { search } = location;\n    const previousParams = new _URLSearchParams(search);\n    const newParams = new _URLSearchParams();\n    _forEachInstanceProperty(previousParams).call(previousParams, (value, key) => {\n      if (key !== URL_PARAMS.nativeFilters.name) {\n        newParams.append(key, value);\n      }\n    });\n    newParams.set(URL_PARAMS.nativeFilters.name, rison.encode(replaceUndefinedByNull(dataMaskSelected)));\n    history.replace({\n      search: newParams.toString() });\n\n  }, [history]);\n  const dataMaskAppliedText = _JSON$stringify(dataMaskApplied);\n  useEffect(() => {\n    publishDataMask(dataMaskApplied);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dataMaskAppliedText, publishDataMask]);\n  const handleApply = () => {\n    const filterIds = _Object$keys(dataMaskSelected);\n    _forEachInstanceProperty(filterIds).call(filterIds, (filterId) => {\n      if (dataMaskSelected[filterId]) {\n        dispatch(updateDataMask(filterId, dataMaskSelected[filterId]));\n      }\n    });\n  };\n  const handleClearAll = () => {\n    const filterIds = _Object$keys(dataMaskSelected);\n    _forEachInstanceProperty(filterIds).call(filterIds, (filterId) => {\n      if (dataMaskSelected[filterId]) {\n        dispatch(clearDataMask(filterId));\n      }\n    });\n  };\n  useFilterUpdates(dataMaskSelected, setDataMaskSelected);\n  const isApplyDisabled = checkIsApplyDisabled(dataMaskSelected, dataMaskApplied, filterValues);\n  const isInitialized = useInitialization();\n  return ___EmotionJSX(BarWrapper, _extends({}, getFilterBarTestId(), { className: cx({ open: filtersOpen }), width: width, __self: this, __source: { fileName: _jsxFileName, lineNumber: 203, columnNumber: 13 } }),\n  ___EmotionJSX(CollapsedBar, _extends({}, getFilterBarTestId('collapsable'), { className: cx({ open: !filtersOpen }), onClick: () => toggleFiltersBar(true), offset: offset, __self: this, __source: { fileName: _jsxFileName, lineNumber: 204, columnNumber: 7 } }),\n  ___EmotionJSX(StyledCollapseIcon, _extends({}, getFilterBarTestId('expand-button'), { iconSize: \"l\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 205, columnNumber: 9 } })),\n  ___EmotionJSX(StyledFilterIcon, _extends({}, getFilterBarTestId('filter-icon'), { iconSize: \"l\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 206, columnNumber: 9 } }))),\n\n  ___EmotionJSX(Bar, { className: cx({ open: filtersOpen }), width: width, __self: this, __source: { fileName: _jsxFileName, lineNumber: 208, columnNumber: 7 } },\n  ___EmotionJSX(Header, { toggleFiltersBar: toggleFiltersBar, onApply: handleApply, onClearAll: handleClearAll, isApplyDisabled: isApplyDisabled, dataMaskSelected: dataMaskSelected, dataMaskApplied: dataMaskApplied, __self: this, __source: { fileName: _jsxFileName, lineNumber: 209, columnNumber: 9 } }),\n  !isInitialized ? ___EmotionJSX(\"div\", { css: /*#__PURE__*/_css({ height }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:FilterBar;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), __self: this, __source: { fileName: _jsxFileName, lineNumber: 210, columnNumber: 28 } },\n  ___EmotionJSX(Loading, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 211, columnNumber: 13 } })) :\n  isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS_SET) ? ___EmotionJSX(StyledTabs, { centered: true, onChange: setTab, defaultActiveKey: TabIds.AllFilters, activeKey: editFilterSetId ? TabIds.AllFilters : undefined, __self: this, __source: { fileName: _jsxFileName, lineNumber: 212, columnNumber: 83 } },\n  ___EmotionJSX(Tabs.TabPane, { tab: t(`All Filters (${filterValues.length})`), key: TabIds.AllFilters, css: /*#__PURE__*/_css({ overflow: 'auto', height }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:FilterBar;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), __self: this, __source: { fileName: _jsxFileName, lineNumber: 213, columnNumber: 13 } },\n  editFilterSetId && ___EmotionJSX(EditSection, { dataMaskSelected: dataMaskSelected, disabled: !isApplyDisabled, onCancel: () => setEditFilterSetId(null), filterSetId: editFilterSetId, __self: this, __source: { fileName: _jsxFileName, lineNumber: 214, columnNumber: 36 } }),\n  ___EmotionJSX(FilterControls, { dataMaskSelected: dataMaskSelected, directPathToChild: directPathToChild, onFilterSelectionChange: handleFilterSelectionChange, __self: this, __source: { fileName: _jsxFileName, lineNumber: 215, columnNumber: 15 } })),\n\n  ___EmotionJSX(Tabs.TabPane, { disabled: !!editFilterSetId, tab: t(`Filter Sets (${filterSetFilterValues.length})`), key: TabIds.FilterSets, css: /*#__PURE__*/_css({ overflow: 'auto', height }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:FilterBar;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), __self: this, __source: { fileName: _jsxFileName, lineNumber: 217, columnNumber: 13 } },\n  ___EmotionJSX(FilterSets, { onEditFilterSet: setEditFilterSetId, disabled: !isApplyDisabled, dataMaskSelected: dataMaskSelected, isFilterSetChanged: isFilterSetChanged, onFilterSelectionChange: handleFilterSelectionChange, __self: this, __source: { fileName: _jsxFileName, lineNumber: 218, columnNumber: 15 } }))) :\n\n  ___EmotionJSX(\"div\", { css: /*#__PURE__*/_css({ overflow: 'auto', height }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:FilterBar;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), __self: this, __source: { fileName: _jsxFileName, lineNumber: 220, columnNumber: 29 } },\n  ___EmotionJSX(FilterControls, { dataMaskSelected: dataMaskSelected, directPathToChild: directPathToChild, onFilterSelectionChange: handleFilterSelectionChange, __self: this, __source: { fileName: _jsxFileName, lineNumber: 221, columnNumber: 13 } }))));\n\n\n\n};__signature__(FilterBar, \"useHistory{history}\\nuseNativeFiltersDataMask{dataMaskApplied}\\nuseState{[editFilterSetId, setEditFilterSetId](null)}\\nuseImmer{[dataMaskSelected, setDataMaskSelected]}\\nuseDispatch{dispatch}\\nuseFilterSets{filterSets}\\nuseState{[tab, setTab](TabIds.AllFilters)}\\nuseFilters{filters}\\nusePrevious{previousFilters}\\nuseState{[isFilterSetChanged, setIsFilterSetChanged](false)}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{publishDataMask}\\nuseEffect{}\\nuseFilterUpdates{}\\nuseInitialization{isInitialized}\", () => [useHistory, useNativeFiltersDataMask, useImmer, useDispatch, useFilterSets, useFilters, usePrevious, useFilterUpdates, useInitialization]);const _default =\nFilterBar;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FILTER_BAR_TEST_ID, \"FILTER_BAR_TEST_ID\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/index.tsx\");reactHotLoader.register(getFilterBarTestId, \"getFilterBarTestId\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/index.tsx\");reactHotLoader.register(BarWrapper, \"BarWrapper\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/index.tsx\");reactHotLoader.register(Bar, \"Bar\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/index.tsx\");reactHotLoader.register(CollapsedBar, \"CollapsedBar\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/index.tsx\");reactHotLoader.register(StyledCollapseIcon, \"StyledCollapseIcon\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/index.tsx\");reactHotLoader.register(StyledFilterIcon, \"StyledFilterIcon\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/index.tsx\");reactHotLoader.register(StyledTabs, \"StyledTabs\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/index.tsx\");reactHotLoader.register(FilterBar, \"FilterBar\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/Users/frankhe/projects/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable no-param-reassign */\nimport { DataMask, HandlerFunction, styled, t } from '@superset-ui/core';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport cx from 'classnames';\nimport Icons from 'src/components/Icons';\nimport { Tabs } from 'src/common/components';\nimport { useHistory } from 'react-router-dom';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport rison from 'rison';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { updateDataMask, clearDataMask } from 'src/dataMask/actions';\nimport { DataMaskStateWithId, DataMaskWithId } from 'src/dataMask/types';\nimport { useImmer } from 'use-immer';\nimport { testWithId } from 'src/utils/testUtils';\nimport { Filter } from 'src/dashboard/components/nativeFilters/types';\nimport Loading from 'src/components/Loading';\nimport { getInitialDataMask } from 'src/dataMask/reducer';\nimport { URL_PARAMS } from 'src/constants';\nimport replaceUndefinedByNull from 'src/dashboard/util/replaceUndefinedByNull';\nimport { checkIsApplyDisabled, TabIds } from './utils';\nimport FilterSets from './FilterSets';\nimport {\n  useNativeFiltersDataMask,\n  useFilters,\n  useFilterSets,\n  useFilterUpdates,\n  useInitialization,\n} from './state';\nimport EditSection from './FilterSets/EditSection';\nimport Header from './Header';\nimport FilterControls from './FilterControls/FilterControls';\n\nexport const FILTER_BAR_TEST_ID = 'filter-bar';\nexport const getFilterBarTestId = testWithId(FILTER_BAR_TEST_ID);\n\nconst BarWrapper = styled.div<{ width: number }>`\n  width: ${({ theme }) => theme.gridUnit * 8}px;\n\n  & .ant-tabs-top > .ant-tabs-nav {\n    margin: 0;\n  }\n  &.open {\n    width: ${({ width }) => width}px; // arbitrary...\n  }\n`;\n\nconst Bar = styled.div<{ width: number }>`\n  & .ant-typography-edit-content {\n    left: 0;\n    margin-top: 0;\n    width: 100%;\n  }\n  position: absolute;\n  top: 0;\n  left: 0;\n  flex-direction: column;\n  flex-grow: 1;\n  width: ${({ width }) => width}px;\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  border-right: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  min-height: 100%;\n  display: none;\n\n  &.open {\n    display: flex;\n  }\n`;\n\nconst CollapsedBar = styled.div<{ offset: number }>`\n  position: absolute;\n  top: ${({ offset }) => offset}px;\n  left: 0;\n  height: 100%;\n  width: ${({ theme }) => theme.gridUnit * 8}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n  display: none;\n  text-align: center;\n\n  &.open {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  svg {\n    cursor: pointer;\n  }\n`;\n\nconst StyledCollapseIcon = styled(Icons.Collapse)`\n  color: ${({ theme }) => theme.colors.primary.base};\n  margin-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n`;\n\nconst StyledFilterIcon = styled(Icons.Filter)`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nconst StyledTabs = styled(Tabs)`\n  & .ant-tabs-nav-list {\n    width: 100%;\n  }\n  & .ant-tabs-tab {\n    display: flex;\n    justify-content: center;\n    margin: 0;\n    flex: 1;\n  }\n`;\n\nexport interface FiltersBarProps {\n  filtersOpen: boolean;\n  toggleFiltersBar: any;\n  directPathToChild?: string[];\n  width: number;\n  height: number | string;\n  offset: number;\n}\n\nconst FilterBar: React.FC<FiltersBarProps> = ({\n  filtersOpen,\n  toggleFiltersBar,\n  directPathToChild,\n  width,\n  height,\n  offset,\n}) => {\n  const history = useHistory();\n  const dataMaskApplied: DataMaskStateWithId = useNativeFiltersDataMask();\n  const [editFilterSetId, setEditFilterSetId] = useState<string | null>(null);\n  const [dataMaskSelected, setDataMaskSelected] = useImmer<DataMaskStateWithId>(\n    dataMaskApplied,\n  );\n  const dispatch = useDispatch();\n  const filterSets = useFilterSets();\n  const filterSetFilterValues = Object.values(filterSets);\n  const [tab, setTab] = useState(TabIds.AllFilters);\n  const filters = useFilters();\n  const previousFilters = usePrevious(filters);\n  const filterValues = Object.values<Filter>(filters);\n  const [isFilterSetChanged, setIsFilterSetChanged] = useState(false);\n\n  useEffect(() => {\n    setDataMaskSelected(() => dataMaskApplied);\n  }, [JSON.stringify(dataMaskApplied), setDataMaskSelected]);\n\n  // reset filter state if filter type changes\n  useEffect(() => {\n    setDataMaskSelected(draft => {\n      Object.values(filters).forEach(filter => {\n        if (\n          filter.filterType !== previousFilters?.[filter.id]?.filterType &&\n          previousFilters?.[filter.id]?.filterType !== undefined\n        ) {\n          draft[filter.id] = getInitialDataMask(filter.id) as DataMaskWithId;\n        }\n      });\n    });\n  }, [\n    JSON.stringify(filters),\n    JSON.stringify(previousFilters),\n    setDataMaskSelected,\n  ]);\n\n  const handleFilterSelectionChange = (\n    filter: Pick<Filter, 'id'> & Partial<Filter>,\n    dataMask: Partial<DataMask>,\n  ) => {\n    setIsFilterSetChanged(tab !== TabIds.AllFilters);\n    setDataMaskSelected(draft => {\n      // force instant updating on initialization for filters with `requiredFirst` is true or instant filters\n      if (\n        // filterState.value === undefined - means that value not initialized\n        dataMask.filterState?.value !== undefined &&\n        dataMaskSelected[filter.id]?.filterState?.value === undefined &&\n        filter.requiredFirst\n      ) {\n        dispatch(updateDataMask(filter.id, dataMask));\n      }\n\n      draft[filter.id] = {\n        ...(getInitialDataMask(filter.id) as DataMaskWithId),\n        ...dataMask,\n      };\n    });\n  };\n\n  const publishDataMask = useCallback(\n    (dataMaskSelected: DataMaskStateWithId) => {\n      const { location } = history;\n      const { search } = location;\n      const previousParams = new URLSearchParams(search);\n      const newParams = new URLSearchParams();\n\n      previousParams.forEach((value, key) => {\n        if (key !== URL_PARAMS.nativeFilters.name) {\n          newParams.append(key, value);\n        }\n      });\n\n      newParams.set(\n        URL_PARAMS.nativeFilters.name,\n        rison.encode(replaceUndefinedByNull(dataMaskSelected)),\n      );\n\n      history.replace({\n        search: newParams.toString(),\n      });\n    },\n    [history],\n  );\n\n  const dataMaskAppliedText = JSON.stringify(dataMaskApplied);\n  useEffect(() => {\n    publishDataMask(dataMaskApplied);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dataMaskAppliedText, publishDataMask]);\n\n  const handleApply = () => {\n    const filterIds = Object.keys(dataMaskSelected);\n    filterIds.forEach(filterId => {\n      if (dataMaskSelected[filterId]) {\n        dispatch(updateDataMask(filterId, dataMaskSelected[filterId]));\n      }\n    });\n  };\n\n  const handleClearAll = () => {\n    const filterIds = Object.keys(dataMaskSelected);\n    filterIds.forEach(filterId => {\n      if (dataMaskSelected[filterId]) {\n        dispatch(clearDataMask(filterId));\n      }\n    });\n  };\n\n  useFilterUpdates(dataMaskSelected, setDataMaskSelected);\n  const isApplyDisabled = checkIsApplyDisabled(\n    dataMaskSelected,\n    dataMaskApplied,\n    filterValues,\n  );\n  const isInitialized = useInitialization();\n\n  return (\n    <BarWrapper\n      {...getFilterBarTestId()}\n      className={cx({ open: filtersOpen })}\n      width={width}\n    >\n      <CollapsedBar\n        {...getFilterBarTestId('collapsable')}\n        className={cx({ open: !filtersOpen })}\n        onClick={() => toggleFiltersBar(true)}\n        offset={offset}\n      >\n        <StyledCollapseIcon\n          {...getFilterBarTestId('expand-button')}\n          iconSize=\"l\"\n        />\n        <StyledFilterIcon {...getFilterBarTestId('filter-icon')} iconSize=\"l\" />\n      </CollapsedBar>\n      <Bar className={cx({ open: filtersOpen })} width={width}>\n        <Header\n          toggleFiltersBar={toggleFiltersBar}\n          onApply={handleApply}\n          onClearAll={handleClearAll}\n          isApplyDisabled={isApplyDisabled}\n          dataMaskSelected={dataMaskSelected}\n          dataMaskApplied={dataMaskApplied}\n        />\n        {!isInitialized ? (\n          <div css={{ height }}>\n            <Loading />\n          </div>\n        ) : isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS_SET) ? (\n          <StyledTabs\n            centered\n            onChange={setTab as HandlerFunction}\n            defaultActiveKey={TabIds.AllFilters}\n            activeKey={editFilterSetId ? TabIds.AllFilters : undefined}\n          >\n            <Tabs.TabPane\n              tab={t(`All Filters (${filterValues.length})`)}\n              key={TabIds.AllFilters}\n              css={{ overflow: 'auto', height }}\n            >\n              {editFilterSetId && (\n                <EditSection\n                  dataMaskSelected={dataMaskSelected}\n                  disabled={!isApplyDisabled}\n                  onCancel={() => setEditFilterSetId(null)}\n                  filterSetId={editFilterSetId}\n                />\n              )}\n              <FilterControls\n                dataMaskSelected={dataMaskSelected}\n                directPathToChild={directPathToChild}\n                onFilterSelectionChange={handleFilterSelectionChange}\n              />\n            </Tabs.TabPane>\n            <Tabs.TabPane\n              disabled={!!editFilterSetId}\n              tab={t(`Filter Sets (${filterSetFilterValues.length})`)}\n              key={TabIds.FilterSets}\n              css={{ overflow: 'auto', height }}\n            >\n              <FilterSets\n                onEditFilterSet={setEditFilterSetId}\n                disabled={!isApplyDisabled}\n                dataMaskSelected={dataMaskSelected}\n                isFilterSetChanged={isFilterSetChanged}\n                onFilterSelectionChange={handleFilterSelectionChange}\n              />\n            </Tabs.TabPane>\n          </StyledTabs>\n        ) : (\n          <div css={{ overflow: 'auto', height }}>\n            <FilterControls\n              dataMaskSelected={dataMaskSelected}\n              directPathToChild={directPathToChild}\n              onFilterSelectionChange={handleFilterSelectionChange}\n            />\n          </div>\n        )}\n      </Bar>\n    </BarWrapper>\n  );\n};\n\nexport default FilterBar;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}