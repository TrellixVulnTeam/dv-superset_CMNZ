{"ast":null,"code":"import \"core-js/modules/es.string.replace.js\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _valuesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/values\";import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";import _everyInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/every\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";import _isEmpty from \"lodash/isEmpty\";var _jsxFileName = \"/Users/frankhe/projects/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndColumnSelect.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect } from 'react';\nimport { tn } from '@superset-ui/core';\n\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport { OptionSelector } from 'src/explore/components/controls/DndColumnSelectControl/utils';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const DndColumnSelect = (props) => {\n  const { value, options, multi = true, onChange, canDelete = true, ghostButtonText } = props;\n  const optionSelector = new OptionSelector(options, multi, value);\n  // synchronize values in case of dataset changes\n  useEffect(() => {\n    const optionSelectorValues = optionSelector.getValues();\n    if (typeof value !== typeof optionSelectorValues) {\n      onChange(optionSelectorValues);\n    }\n    if (typeof value === 'string' &&\n    typeof optionSelectorValues === 'string' &&\n    value !== optionSelectorValues) {\n      onChange(optionSelectorValues);\n    }\n    if (_Array$isArray(optionSelectorValues) &&\n    _Array$isArray(value) && (\n    optionSelectorValues.length !== value.length ||\n    _everyInstanceProperty(optionSelectorValues).call(optionSelectorValues, (val, index) => val === value[index]))) {\n      onChange(optionSelectorValues);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [_JSON$stringify(value), _JSON$stringify(optionSelector.getValues())]);\n  const onDrop = (item) => {\n    const column = item.value;\n    if (!optionSelector.multi && !_isEmpty(_valuesInstanceProperty(optionSelector))) {\n      optionSelector.replace(0, column.column_name);\n    } else\n    {\n      optionSelector.add(column.column_name);\n    }\n    onChange(optionSelector.getValues());\n  };\n  const canDrop = (item) => {\n    const columnName = item.value.column_name;\n    return columnName in optionSelector.options && !optionSelector.has(columnName);\n  };\n  const onClickClose = (index) => {\n    optionSelector.del(index);\n    onChange(optionSelector.getValues());\n  };\n  const onShiftOptions = (dragIndex, hoverIndex) => {\n    optionSelector.swap(dragIndex, hoverIndex);\n    onChange(optionSelector.getValues());\n  };\n  const valuesRenderer = () => {var _context;return _mapInstanceProperty(_context = _valuesInstanceProperty(optionSelector)).call(_context, (column, idx) => ___EmotionJSX(OptionWrapper, { key: idx, index: idx, clickClose: onClickClose, onShiftOptions: onShiftOptions, type: DndItemType.ColumnOption, canDelete: canDelete, __self: this, __source: { fileName: _jsxFileName, lineNumber: 71, columnNumber: 78 } },\n    ___EmotionJSX(StyledColumnOption, { column: column, showType: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 72, columnNumber: 9 } })));};\n\n  return ___EmotionJSX(DndSelectLabel, _extends({ onDrop: onDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: DndItemType.Column, displayGhostButton: multi || _valuesInstanceProperty(optionSelector).length === 0, ghostButtonText: ghostButtonText || tn('Drop column', 'Drop columns', multi ? 2 : 1) }, props, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 74, columnNumber: 13 } }));\n};__signature__(DndColumnSelect, \"useEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DndColumnSelect, \"DndColumnSelect\", \"/Users/frankhe/projects/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndColumnSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/Users/frankhe/projects/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndColumnSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect } from 'react';\nimport { tn } from '@superset-ui/core';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport { isEmpty } from 'lodash';\nimport { LabelProps } from 'src/explore/components/controls/DndColumnSelectControl/types';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport { OptionSelector } from 'src/explore/components/controls/DndColumnSelectControl/utils';\nimport { DatasourcePanelDndItem } from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\n\nexport const DndColumnSelect = (props: LabelProps) => {\n  const {\n    value,\n    options,\n    multi = true,\n    onChange,\n    canDelete = true,\n    ghostButtonText,\n  } = props;\n  const optionSelector = new OptionSelector(options, multi, value);\n\n  // synchronize values in case of dataset changes\n  useEffect(() => {\n    const optionSelectorValues = optionSelector.getValues();\n    if (typeof value !== typeof optionSelectorValues) {\n      onChange(optionSelectorValues);\n    }\n    if (\n      typeof value === 'string' &&\n      typeof optionSelectorValues === 'string' &&\n      value !== optionSelectorValues\n    ) {\n      onChange(optionSelectorValues);\n    }\n    if (\n      Array.isArray(optionSelectorValues) &&\n      Array.isArray(value) &&\n      (optionSelectorValues.length !== value.length ||\n        optionSelectorValues.every((val, index) => val === value[index]))\n    ) {\n      onChange(optionSelectorValues);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(value), JSON.stringify(optionSelector.getValues())]);\n\n  const onDrop = (item: DatasourcePanelDndItem) => {\n    const column = item.value as ColumnMeta;\n    if (!optionSelector.multi && !isEmpty(optionSelector.values)) {\n      optionSelector.replace(0, column.column_name);\n    } else {\n      optionSelector.add(column.column_name);\n    }\n    onChange(optionSelector.getValues());\n  };\n\n  const canDrop = (item: DatasourcePanelDndItem) => {\n    const columnName = (item.value as ColumnMeta).column_name;\n    return (\n      columnName in optionSelector.options && !optionSelector.has(columnName)\n    );\n  };\n\n  const onClickClose = (index: number) => {\n    optionSelector.del(index);\n    onChange(optionSelector.getValues());\n  };\n\n  const onShiftOptions = (dragIndex: number, hoverIndex: number) => {\n    optionSelector.swap(dragIndex, hoverIndex);\n    onChange(optionSelector.getValues());\n  };\n\n  const valuesRenderer = () =>\n    optionSelector.values.map((column, idx) => (\n      <OptionWrapper\n        key={idx}\n        index={idx}\n        clickClose={onClickClose}\n        onShiftOptions={onShiftOptions}\n        type={DndItemType.ColumnOption}\n        canDelete={canDelete}\n      >\n        <StyledColumnOption column={column} showType />\n      </OptionWrapper>\n    ));\n\n  return (\n    <DndSelectLabel<string | string[], ColumnMeta[]>\n      onDrop={onDrop}\n      canDrop={canDrop}\n      valuesRenderer={valuesRenderer}\n      accept={DndItemType.Column}\n      displayGhostButton={multi || optionSelector.values.length === 0}\n      ghostButtonText={\n        ghostButtonText || tn('Drop column', 'Drop columns', multi ? 2 : 1)\n      }\n      {...props}\n    />\n  );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}